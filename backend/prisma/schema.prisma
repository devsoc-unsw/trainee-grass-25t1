// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String @id @default(uuid())
    name           String
    username       String @unique
    leetcodeHandle String @unique

    totalSolved         Int      @default(0)
    easySolved          Int      @default(0)
    mediumSolved        Int      @default(0)
    hardSolved          Int      @default(0)
    leetcodeLastUpdated DateTime @default(now()) @updatedAt

    levels                 Int @default(1)
    streaks                Int @default(0)
    xp                     Int @default(0)
    remainingLoginAttempts Int @default(5)

    activeAvatarName     String
    activeAvatar         Avatar               @relation(fields: [activeAvatarName], references: [name], onDelete: Cascade)
    activeBackgroundName String
    activeBackground     Background           @relation(fields: [activeBackgroundName], references: [name], onDelete: Cascade)
    tokens               Token[]
    avatarUnlocked       AvatarUnlocked[]
    backgroundUnlocked   BackgroundUnlocked[]
}

model Avatar {
    name              String           @id @unique
    imageUrl          String
    unlockRequirement Int              @default(0)
    unlockedByUsers   AvatarUnlocked[]
    users             User[]
}

model Background {
    name              String               @id @unique
    imageUrl          String
    unlockRequirement Int                  @default(0)
    unlockedByUsers   BackgroundUnlocked[]
    users             User[]
}

model AvatarUnlocked {
    userId     String
    user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    avatarName String
    avatar     Avatar @relation(fields: [avatarName], references: [name], onDelete: Cascade)

    @@id([userId, avatarName])
}

model BackgroundUnlocked {
    userId         String
    user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    backgroundName String
    background     Background @relation(fields: [backgroundName], references: [name], onDelete: Cascade)

    @@id([userId, backgroundName])
}

model Token {
    id           String @id @default(uuid())
    accessToken  String @unique
    refreshToken String @unique
    userId       String
    user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
