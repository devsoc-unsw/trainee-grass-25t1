// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                     String               @id @default(uuid())
    name                   String
    email                  String               @unique
    username               String               @unique
    password               String
    leetcodeHandle         String              @unique
    leetcodeStats          LeetCodeStats?     
    solvedProblems         LeetCodeProblemsSolved[]
    levels                 Int                  @default(1)
    streaks                Int                  @default(0)
    xp                     Int                  @default(0)
    remainingLoginAttempts Int                  @default(5)
    activeAvatarId         String
    activeAvatar           Avatar               @relation(fields: [activeAvatarId], references: [id], onDelete: Cascade)
    activeBackgroundId     String
    activeBackground       Background           @relation(fields: [activeBackgroundId], references: [id], onDelete: Cascade)
    tokens                 Token[]
    avatarUnlocked         AvatarUnlocked[]
    backgroundUnlocked     BackgroundUnlocked[]
}

model LeetCodeStats {
    id              String             @id @default(uuid())
    userId          String             @unique
    totalSolved     Int                @default(0)
    easySolved      Int                @default(0)
    mediumSolved    Int                @default(0)
    hardSolved      Int                @default(0)
    ranking         Int                @default(0)
    lastUpdated     DateTime           @updatedAt
    user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model LeetCodeProblemsSolved {
    id             String              @id @default(uuid())
    userId         String              
    problemId      Int                 
    titleSlug      String
    title          String
    difficulty     String
    completedAt    DateTime           @default(now())
    user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, problemId])
    @@index([userId])
}

model Avatar {
    id                String           @id @default(uuid())
    name              String           @unique
    imageUrl          String
    unlockRequirement Int              @default(0)
    unlockedByUsers   AvatarUnlocked[]
    users             User[]
}

model Background {
    id                String               @id @default(uuid())
    name              String               @unique
    imageUrl          String
    unlockRequirement Int                  @default(0)
    unlockedByUsers   BackgroundUnlocked[]
    users             User[]
}

model AvatarUnlocked {
    userId   String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    avatarId String
    avatar   Avatar @relation(fields: [avatarId], references: [id], onDelete: Cascade)

    @@id([userId, avatarId])
}

model BackgroundUnlocked {
    userId       String
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    backgroundId String
    background   Background @relation(fields: [backgroundId], references: [id], onDelete: Cascade)

    @@id([userId, backgroundId])
}

model Token {
    id           String @id @default(uuid())
    accessToken  String @unique
    refreshToken String @unique
    userId       String
    user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
